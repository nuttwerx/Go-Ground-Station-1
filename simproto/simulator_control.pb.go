// Code generated by protoc-gen-go. DO NOT EDIT.
// source: simulator_control.proto

/*
Package simproto is a generated protocol buffer package.

It is generated from these files:
	simulator_control.proto

It has these top-level messages:
	SimCommand
	Ack
	SimInit
	PusherCommand
*/
package simproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SimCommand_SimCommandEnum int32

const (
	SimCommand_RunSimulator   SimCommand_SimCommandEnum = 0
	SimCommand_PauseSimulator SimCommand_SimCommandEnum = 1
	SimCommand_StopSimulator  SimCommand_SimCommandEnum = 2
	SimCommand_StartPush      SimCommand_SimCommandEnum = 3
)

var SimCommand_SimCommandEnum_name = map[int32]string{
	0: "RunSimulator",
	1: "PauseSimulator",
	2: "StopSimulator",
	3: "StartPush",
}
var SimCommand_SimCommandEnum_value = map[string]int32{
	"RunSimulator":   0,
	"PauseSimulator": 1,
	"StopSimulator":  2,
	"StartPush":      3,
}

func (x SimCommand_SimCommandEnum) String() string {
	return proto.EnumName(SimCommand_SimCommandEnum_name, int32(x))
}
func (SimCommand_SimCommandEnum) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

type PusherCommand_PusherCommandEnum int32

const (
	PusherCommand_StartPush PusherCommand_PusherCommandEnum = 0
)

var PusherCommand_PusherCommandEnum_name = map[int32]string{
	0: "StartPush",
}
var PusherCommand_PusherCommandEnum_value = map[string]int32{
	"StartPush": 0,
}

func (x PusherCommand_PusherCommandEnum) String() string {
	return proto.EnumName(PusherCommand_PusherCommandEnum_name, int32(x))
}
func (PusherCommand_PusherCommandEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{3, 0}
}

type SimCommand struct {
	Command SimCommand_SimCommandEnum `protobuf:"varint,1,opt,name=command,enum=simproto.SimCommand_SimCommandEnum" json:"command,omitempty"`
}

func (m *SimCommand) Reset()                    { *m = SimCommand{} }
func (m *SimCommand) String() string            { return proto.CompactTextString(m) }
func (*SimCommand) ProtoMessage()               {}
func (*SimCommand) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *SimCommand) GetCommand() SimCommand_SimCommandEnum {
	if m != nil {
		return m.Command
	}
	return SimCommand_RunSimulator
}

type Ack struct {
	Success bool   `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (m *Ack) Reset()                    { *m = Ack{} }
func (m *Ack) String() string            { return proto.CompactTextString(m) }
func (*Ack) ProtoMessage()               {}
func (*Ack) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Ack) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *Ack) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type SimInit struct {
	ConfigFiles []string `protobuf:"bytes,1,rep,name=config_files,json=configFiles" json:"config_files,omitempty"`
	OutputDir   string   `protobuf:"bytes,2,opt,name=output_dir,json=outputDir" json:"output_dir,omitempty"`
}

func (m *SimInit) Reset()                    { *m = SimInit{} }
func (m *SimInit) String() string            { return proto.CompactTextString(m) }
func (*SimInit) ProtoMessage()               {}
func (*SimInit) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *SimInit) GetConfigFiles() []string {
	if m != nil {
		return m.ConfigFiles
	}
	return nil
}

func (m *SimInit) GetOutputDir() string {
	if m != nil {
		return m.OutputDir
	}
	return ""
}

type PusherCommand struct {
	Command PusherCommand_PusherCommandEnum `protobuf:"varint,1,opt,name=command,enum=simproto.PusherCommand_PusherCommandEnum" json:"command,omitempty"`
}

func (m *PusherCommand) Reset()                    { *m = PusherCommand{} }
func (m *PusherCommand) String() string            { return proto.CompactTextString(m) }
func (*PusherCommand) ProtoMessage()               {}
func (*PusherCommand) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *PusherCommand) GetCommand() PusherCommand_PusherCommandEnum {
	if m != nil {
		return m.Command
	}
	return PusherCommand_StartPush
}

func init() {
	proto.RegisterType((*SimCommand)(nil), "simproto.SimCommand")
	proto.RegisterType((*Ack)(nil), "simproto.Ack")
	proto.RegisterType((*SimInit)(nil), "simproto.SimInit")
	proto.RegisterType((*PusherCommand)(nil), "simproto.PusherCommand")
	proto.RegisterEnum("simproto.SimCommand_SimCommandEnum", SimCommand_SimCommandEnum_name, SimCommand_SimCommandEnum_value)
	proto.RegisterEnum("simproto.PusherCommand_PusherCommandEnum", PusherCommand_PusherCommandEnum_name, PusherCommand_PusherCommandEnum_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for SimControl service

type SimControlClient interface {
	ControlSim(ctx context.Context, in *SimCommand, opts ...grpc.CallOption) (*Ack, error)
	InitSim(ctx context.Context, in *SimInit, opts ...grpc.CallOption) (*Ack, error)
	ControlPusher(ctx context.Context, in *PusherCommand, opts ...grpc.CallOption) (*Ack, error)
}

type simControlClient struct {
	cc *grpc.ClientConn
}

func NewSimControlClient(cc *grpc.ClientConn) SimControlClient {
	return &simControlClient{cc}
}

func (c *simControlClient) ControlSim(ctx context.Context, in *SimCommand, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := grpc.Invoke(ctx, "/simproto.SimControl/ControlSim", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simControlClient) InitSim(ctx context.Context, in *SimInit, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := grpc.Invoke(ctx, "/simproto.SimControl/InitSim", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simControlClient) ControlPusher(ctx context.Context, in *PusherCommand, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := grpc.Invoke(ctx, "/simproto.SimControl/ControlPusher", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SimControl service

type SimControlServer interface {
	ControlSim(context.Context, *SimCommand) (*Ack, error)
	InitSim(context.Context, *SimInit) (*Ack, error)
	ControlPusher(context.Context, *PusherCommand) (*Ack, error)
}

func RegisterSimControlServer(s *grpc.Server, srv SimControlServer) {
	s.RegisterService(&_SimControl_serviceDesc, srv)
}

func _SimControl_ControlSim_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimCommand)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimControlServer).ControlSim(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/simproto.SimControl/ControlSim",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimControlServer).ControlSim(ctx, req.(*SimCommand))
	}
	return interceptor(ctx, in, info, handler)
}

func _SimControl_InitSim_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimInit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimControlServer).InitSim(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/simproto.SimControl/InitSim",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimControlServer).InitSim(ctx, req.(*SimInit))
	}
	return interceptor(ctx, in, info, handler)
}

func _SimControl_ControlPusher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PusherCommand)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimControlServer).ControlPusher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/simproto.SimControl/ControlPusher",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimControlServer).ControlPusher(ctx, req.(*PusherCommand))
	}
	return interceptor(ctx, in, info, handler)
}

var _SimControl_serviceDesc = grpc.ServiceDesc{
	ServiceName: "simproto.SimControl",
	HandlerType: (*SimControlServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ControlSim",
			Handler:    _SimControl_ControlSim_Handler,
		},
		{
			MethodName: "InitSim",
			Handler:    _SimControl_InitSim_Handler,
		},
		{
			MethodName: "ControlPusher",
			Handler:    _SimControl_ControlPusher_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "simulator_control.proto",
}

func init() { proto.RegisterFile("simulator_control.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 334 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x51, 0x4d, 0x4f, 0xc2, 0x40,
	0x14, 0xa4, 0x90, 0x58, 0xfa, 0xa4, 0x04, 0x5e, 0x4c, 0x20, 0x26, 0x26, 0xb8, 0x5e, 0xf0, 0x20,
	0x07, 0x38, 0x71, 0xf0, 0x40, 0x50, 0x13, 0xe3, 0x85, 0xb4, 0x17, 0x6f, 0xa4, 0x2e, 0x05, 0x37,
	0xb0, 0x5d, 0xb2, 0x1f, 0x89, 0x7f, 0xc8, 0x93, 0x7f, 0xd2, 0x6c, 0xcb, 0xa6, 0xd6, 0xea, 0xed,
	0xcd, 0xbc, 0x99, 0xed, 0x74, 0x1e, 0x0c, 0x14, 0xe3, 0xe6, 0x90, 0x68, 0x21, 0xd7, 0x54, 0x64,
	0x5a, 0x8a, 0xc3, 0xe4, 0x28, 0x85, 0x16, 0xd8, 0x56, 0x8c, 0xe7, 0x13, 0xf9, 0xf4, 0x00, 0x62,
	0xc6, 0x97, 0x82, 0xf3, 0x24, 0xdb, 0xe0, 0x3d, 0xf8, 0xb4, 0x18, 0x87, 0xde, 0xc8, 0x1b, 0x77,
	0xa7, 0x37, 0x13, 0x27, 0x9d, 0x94, 0xb2, 0x1f, 0xe3, 0x63, 0x66, 0x78, 0xe4, 0x3c, 0xe4, 0x15,
	0xba, 0xd5, 0x15, 0xf6, 0xa0, 0x13, 0x99, 0x2c, 0x76, 0x39, 0x7a, 0x0d, 0x44, 0xe8, 0xae, 0x12,
	0xa3, 0xd2, 0x92, 0xf3, 0xb0, 0x0f, 0x61, 0xac, 0xc5, 0xb1, 0xa4, 0x9a, 0x18, 0x42, 0x10, 0xeb,
	0x44, 0xea, 0x95, 0x51, 0xef, 0xbd, 0x16, 0x99, 0x43, 0x6b, 0x41, 0xf7, 0x38, 0x04, 0x5f, 0x19,
	0x4a, 0x53, 0xa5, 0xf2, 0x7c, 0xed, 0xc8, 0x41, 0xbb, 0xe1, 0xa9, 0x52, 0xc9, 0x2e, 0x1d, 0x36,
	0x47, 0xde, 0x38, 0x88, 0x1c, 0x24, 0x2f, 0xe0, 0xc7, 0x8c, 0x3f, 0x67, 0x4c, 0xe3, 0x35, 0x74,
	0xa8, 0xc8, 0xb6, 0x6c, 0xb7, 0xde, 0xb2, 0x43, 0x6a, 0xdf, 0x68, 0x8d, 0x83, 0xe8, 0xbc, 0xe0,
	0x9e, 0x2c, 0x85, 0x57, 0x00, 0xc2, 0xe8, 0xa3, 0xd1, 0xeb, 0x0d, 0x93, 0xa7, 0xa7, 0x82, 0x82,
	0x79, 0x60, 0x92, 0x7c, 0x40, 0x68, 0x13, 0xa5, 0xd2, 0x35, 0xb6, 0xfc, 0xdd, 0xd8, 0x6d, 0xd9,
	0x58, 0x45, 0x59, 0x45, 0xd5, 0xde, 0x08, 0xf4, 0x6b, 0xdb, 0x6a, 0x03, 0x8d, 0xe9, 0x97, 0xbb,
	0x54, 0x7e, 0x48, 0x9c, 0x01, 0x9c, 0xc6, 0x98, 0x71, 0xbc, 0xf8, 0xeb, 0x4c, 0x97, 0x61, 0xc9,
	0x2e, 0xe8, 0x9e, 0x34, 0xf0, 0x0e, 0x7c, 0xdb, 0x83, 0x75, 0xf4, 0x2b, 0x0e, 0xcb, 0xd6, 0xe5,
	0x73, 0x08, 0x4f, 0xdf, 0x28, 0xd2, 0xe1, 0xe0, 0x9f, 0x7f, 0xab, 0x59, 0xdf, 0xce, 0x72, 0x30,
	0xfb, 0x0e, 0x00, 0x00, 0xff, 0xff, 0x46, 0xc3, 0x00, 0x04, 0x83, 0x02, 0x00, 0x00,
}
